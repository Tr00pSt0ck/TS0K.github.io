// JS Loader
var js = atob('');
var script = document.createElement('script');
script.textContent = js;
document.body.appendChild(script);