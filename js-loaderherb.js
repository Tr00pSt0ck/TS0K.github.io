// JS Loader
var js = atob('// Updated herb data with icons
        const herbs = [
            { id: 1, name: "Mint", icon: "seedling", description: "Refreshing and cool, great for teas, desserts, and cocktails." },
            { id: 2, name: "Basil", icon: "seedling", description: "Sweet and aromatic, perfect for pesto, Italian dishes, and salads." },
            { id: 3, name: "Chives", icon: "seedling", description: "Mild onion flavor, excellent for garnishing potatoes, soups, and dips." },
            { id: 4, name: "Coriander", icon: "seedling", description: "Fresh citrusy flavor, essential for Mexican, Asian, and Indian cuisines." },
            { id: 5, name: "Dill", icon: "seedling", description: "Delicate and tangy, perfect for pickling, fish dishes, and salads." },
            { id: 6, name: "Lovage", icon: "seedling", description: "Celery-like flavor with a hint of parsley, great for soups and stews." },
            { id: 7, name: "Flat Parsley", icon: "seedling", description: "Mild and versatile, ideal for garnishing and Mediterranean dishes." },
            { id: 8, name: "Sorrel", icon: "seedling", description: "Tangy lemon flavor, perfect for soups, sauces, and fresh salads." },
            { id: 9, name: "Garlic", icon: "seedling", description: "Pungent and aromatic, fundamental in countless global cuisines." },
            { id: 10, name: "Turmeric", icon: "seedling", description: "Earthy and warm, known for its vibrant color and health benefits." },
            { id: 11, name: "Rosemary", icon: "seedling", description: "Woody and fragrant, excellent for roasted meats and potatoes." },
            { id: 12, name: "Thyme", icon: "seedling", description: "Subtle earthy flavor, pairs well with poultry, vegetables, and stews." },
            { id: 13, name: "Sage", icon: "seedling", description: "Earthy and savory, ideal for stuffing, sausages, and rich sauces." },
            { id: 14, name: "Tarragon", icon: "seedling", description: "Anise-like flavor, perfect for chicken, fish, and creamy sauces." },
            { id: 15, name: "Peeled Garlic 1KG", icon: "seedling", description: "Convenient pre-peeled garlic for bulk cooking and processing." },
            { id: 16, name: "Edible Flowers", icon: "seedling", description: "Colorful and flavorful, used to garnish salads, desserts, and drinks." },
            { id: 17, name: "Micro Coriander", icon: "seedling", description: "Tiny coriander leaves with intense flavor, perfect garnish." },
            { id: 18, name: "Micro Red Amaranth", icon: "seedling", description: "Vibrant microgreens with a mild, earthy taste and color pop." },
            { id: 19, name: "Micro Fennel", icon: "seedling", description: "Delicate fennel fronds with a light anise flavor." },
            { id: 20, name: "Micro Garlic", icon: "seedling", description: "Microgreen version of garlic with a mild garlicky essence." },
            { id: 21, name: "Micro Lemon Balm", icon: "seedling", description: "Small citrusy leaves perfect for desserts and teas." },
            { id: 22, name: "Micro Red Vein Sorrel", icon: "seedling", description: "Tangy microgreens with beautiful red veins and lemony taste." }
        ];

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            const herbList = document.getElementById('herbList');
            const reportModal = document.getElementById('reportModal');
            const closeModal = document.getElementById('closeModal');
            const cancelBtn = document.getElementById('cancelBtn');
            const generateReport = document.getElementById('generateReport');
            const sendEmailBtn = document.getElementById('sendEmailBtn');
            const sendAllBtn = document.getElementById('sendAllBtn');
            const reportList = document.getElementById('reportList');
            const emailForm = document.getElementById('emailForm');
            const searchInput = document.getElementById('searchInput');
            const notification = document.getElementById('notification');
            
            // Generate herb cards
            function renderHerbList(herbsArray = herbs) {
                herbList.innerHTML = '';
                herbsArray.forEach(herb => {
                    const herbCard = document.createElement('div');
                    herbCard.className = 'herb-card';
                    herbCard.innerHTML = `
                        <div class="herb-header">
                            <h3 class="herb-name">
                                <i class="fas fa-${herb.icon} herb-icon"></i>
                                ${herb.name}
                            </h3>
                            <div class="herb-id">ID: ${herb.id}</div>
                        </div>
                        <div class="herb-info">
                            <p class="herb-description">${herb.description}</p>
                            <div class="quantity-control">
                                <span class="quantity-label">Boxes:</span>
                                <input type="number" min="0" class="quantity-input" id="herb-${herb.id}" placeholder="Enter amount">
                            </div>
                        </div>
                    `;
                    herbList.appendChild(herbCard);
                });
            }
            
            renderHerbList();
            
            // Search functionality
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                const filteredHerbs = herbs.filter(herb => 
                    herb.name.toLowerCase().includes(searchTerm) || 
                    herb.description.toLowerCase().includes(searchTerm)
                );
                renderHerbList(filteredHerbs);
            });
            
            // Show report modal
            function showReport() {
                // Clear previous report
                reportList.innerHTML = '';
                
                // Generate report items
                herbs.forEach(herb => {
                    const input = document.getElementById(`herb-${herb.id}`);
                    let quantity = 'N/A';
                    let quantityClass = '';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            if (value === 0) {
                                quantity = '0';
                                quantityClass = 'quantity-zero';
                            } else {
                                quantity = value === 1 ? '1 box' : `${value} boxes`;
                            }
                        }
                    }
                    
                    const reportItem = document.createElement('li');
                    reportItem.className = 'report-item';
                    reportItem.innerHTML = `
                        <span class="report-herb">${herb.name}</span>
                        <span class="report-quantity ${quantityClass}">${quantity}</span>
                    `;
                    reportList.appendChild(reportItem);
                });
                
                reportModal.classList.add('show');
            }
            
            generateReport.addEventListener('click', showReport);
            sendAllBtn.addEventListener('click', showReport);
            
            // Close modal
            const closeModalFunc = () => {
                reportModal.classList.remove('show');
            };
            
            closeModal.addEventListener('click', closeModalFunc);
            cancelBtn.addEventListener('click', closeModalFunc);
            
            // Function to get formatted inventory list for email
            function getInventoryList() {
                let inventoryList = "";
                
                herbs.forEach(herb => {
                    const input = document.getElementById(`herb-${herb.id}`);
                    let quantity = 'N/A';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            quantity = value === 0 ? '0' : (value === 1 ? '1 box' : `${value} boxes`);
                        }
                    }
                    
                    inventoryList += `${herb.name}: ${quantity}\n`;
                });
                
                return inventoryList;
            }
            
            // Send email functionality
            sendEmailBtn.addEventListener('click', (e) => {
                e.preventDefault();
                
                if (emailForm.checkValidity()) {
                    const email = document.getElementById('email').value;
                    const subject = document.getElementById('subject').value;
                    const message = document.getElementById('message').value;
                    const inventoryList = getInventoryList();
                    
                    // Prepare email content
                    const emailBody = encodeURIComponent(
                        `${message}\n\n` +
                        "HERB INVENTORY REPORT:\n" +
                        "========================\n\n" +
                        inventoryList
                    );
                    
                    // Create mailto link
                    const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${emailBody}`;
                    
                    // Show notification
                    notification.classList.add('show');
                    setTimeout(() => {
                        notification.classList.remove('show');
                    }, 3000);
                    
                    // Open the email client
                    window.location.href = mailtoLink;
                    
                    // Close the modal after a delay to allow the email client to open
                    setTimeout(closeModalFunc, 500);
                } else {
                    alert('Please enter a valid email address');
                }
            });
            
            // Close modal if clicked outside content
            reportModal.addEventListener('click', (e) => {
                if (e.target === reportModal) {
                    closeModalFunc();
                }
            });
        });');
var script = document.createElement('script');
script.textContent = js;
document.body.appendChild(script);