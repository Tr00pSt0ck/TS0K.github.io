// CSS Loader
var css = atob('* {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        :root {
            --primary: #2e7d32;
            --primary-light: #4caf50;
            --primary-dark: #1b5e20;
            --secondary: #f5f9f5;
            --accent: #ff9800;
            --text: #333;
            --text-light: #666;
            --danger: #f44336;
            --success: #4caf50;
            --border: #c8e6c9;
            --shadow: rgba(0, 0, 0, 0.08);
            --card-bg: #fff;
        }
        
        body {
            background: linear-gradient(135deg, #f0f9f0, #e0f5e0);
            min-height: 100vh;
            padding: 20px;
            color: var(--text);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0 20px;
            margin-bottom: 20px;
        }
        
            .top-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        margin-bottom: 10px;
    }
    
    .home-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
        color: white;
        padding: 10px 20px;
        border-radius: 50px;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .home-btn:hover {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

        h1 {
            font-size: 3rem;
            color: var(--primary-dark);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }
        
        .logo {
            background: var(--primary-light);
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: var(--primary);
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 0 10px;
        }
        
        .search-box {
            display: flex;
            align-items: center;
            background: white;
            border-radius: 50px;
            padding: 8px 20px;
            box-shadow: 0 2px 8px var(--shadow);
            width: 300px;
        }
        
        .search-box input {
            border: none;
            padding: 8px 15px;
            font-size: 1rem;
            width: 100%;
            outline: none;
            background: transparent;
        }
        
        .herb-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .herb-card {
            background: var(--card-bg);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 20px var(--shadow);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            border-left: 5px solid var(--primary-light);
        }
        
        .herb-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .herb-header {
            background: rgba(76, 175, 80, 0.1);
            padding: 15px 20px;
            border-bottom: 1px solid #e0f2e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .herb-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--primary-dark);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .herb-icon {
            color: var(--primary-light);
            font-size: 1.4rem;
            width: 30px;
            text-align: center;
        }
        
        .herb-id {
            background: var(--primary);
            color: white;
            font-size: 0.9rem;
            padding: 3px 10px;
            border-radius: 20px;
            position: relative; /* Required for absolute positioning */
            min-height: 30px;   /* Ensure parent has height */
            max-height: 30px;
            white-space: nowrap;
        }
        
        .herb-info {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .herb-description {
            color: var(--text-light);
            margin-bottom: 20px;
            line-height: 1.5;
            flex-grow: 1;
            font-size: 0.95rem;
        }
        
        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        .quantity-label {
            font-weight: 600;
            color: var(--primary);
            min-width: 70px;
            font-size: 0.9rem;
        }
        
        .quantity-input {
            flex-grow: 1;
            padding: 10px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
            color: var(--primary-dark);
            transition: border-color 0.3s;
            width: 100%;
        }
        
        .quantity-input:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
        }
        
        .actions {
            text-align: center;
            margin: 40px 0;
        }
        
        .btn {
            background: var(--primary-light);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.1rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(76, 175, 80, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }
        
        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-3px);
            box-shadow: 0 7px 15px rgba(76, 175, 80, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-large {
            padding: 15px 50px;
            font-size: 1.2rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .modal.show {
            display: flex;
            opacity: 1;
        }
        
        .modal-content {
            background: white;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            transform: translateY(20px);
            transition: transform 0.4s ease;
        }
        
        .modal.show .modal-content {
            transform: translateY(0);
        }
        
        .modal-header {
            background: var(--primary-light);
            color: white;
            padding: 20px;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.8rem;
            cursor: pointer;
            transition: transform 0.3s;
        }
        
        .close-btn:hover {
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 25px;
        }
        
        .report-content {
            margin-bottom: 30px;
        }
        
        .report-title {
            text-align: center;
            margin-bottom: 25px;
            color: var(--primary-dark);
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .report-list {
            list-style: none;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .report-item {
            display: flex;
            padding: 15px 20px;
            border-bottom: 1px solid #e0e0e0;
            align-items: center;
        }
        
        .report-item:last-child {
            border-bottom: none;
        }
        
        .report-item:nth-child(even) {
            background: #f5f5f5;
        }
        
        .report-herb {
            flex: 1;
            font-weight: 600;
        }
        
        .report-quantity {
            width: 100px;
            text-align: right;
            font-weight: 600;
            color: var(--primary-dark);
        }
        
        .quantity-zero {
            color: var(--danger);
            font-weight: bold;
        }
        
        .email-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--text);
            font-size: 0.9rem;
        }
        
        .form-input {
            padding: 12px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary-light);
        }
        
        .modal-footer {
            padding: 0 25px 25px;
            display: flex;
            gap: 15px;
            justify-content: flex-end;
        }
        
        .btn-secondary {
            background: #f5f5f5;
            color: var(--text);
        }
        
        .btn-secondary:hover {
            background: #e0e0e0;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            color: var(--primary);
            font-size: 0.9rem;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--primary-light);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: none;
            z-index: 2000;
        }
        
        .notification.show {
            display: block;
            animation: fadeInOut 3s ease;
        }
        
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
        
        @media (max-width: 768px) {
            .herb-list {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .search-box {
                width: 100%;
            }
            
            .btn {
                padding: 12px 30px;
                font-size: 1rem;
            }
        }
        
        @media (max-width: 480px) {
            .herb-list {
                grid-template-columns: 1fr;
            }
            
            .report-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            
            .report-quantity {
                text-align: left;
                width: auto;
            }
            
            .modal-footer {
                flex-direction: column;
            }
        }');
var style = document.createElement('style');
style.textContent = css;
document.head.appendChild(style);