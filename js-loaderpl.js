// JS Loader
var js = atob('// Polish produce data
    const products = [
        { id: 1, name: "Parsley Root", icon: "carrot", description: "Traditional Polish root vegetable with distinct flavor" },
        { id: 2, name: "Celeriac with Crown", icon: "seedling", description: "Celery root with fresh green crown attached" },
        { id: 3, name: "Dill Crown Bunch", icon: "leaf", description: "Fresh aromatic dill crowns for authentic Polish dishes" },
        { id: 4, name: "Parsley Root Bunch", icon: "carrot", description: "Fresh parsley roots sold in bunches" },
        { id: 5, name: "Polish Big Soup Pack (Wloszczyzna)", icon: "box-open", description: "Large assortment of vegetables for traditional Polish soups" },
        { id: 6, name: "Polish Small Soup Pack (Wloszczyzna)", icon: "box", description: "Smaller vegetable pack for everyday soups" },
        { id: 7, name: "Gherkins", icon: "seedling", description: "Small, crunchy pickled cucumbers" },
        { id: 8, name: "Yellow Beans", icon: "seedling", description: "Bright yellow string beans for stews and salads" },
        { id: 9, name: "Yellow Plums", icon: "apple-alt", description: "Sweet Polish plums with golden yellow skin" },
        { id: 10, name: "Black Radish", icon: "carrot", description: "Hearty winter radish with distinctive black skin" },
        { id: 11, name: "Tomatoes - Black", icon: "seedling", description: "Deep-colored tomatoes with rich, complex flavor" },
        { id: 12, name: "Tomatoes - Paprika", icon: "seedling", description: "Meaty tomatoes perfect for stuffing and sauces" },
        { id: 13, name: "Tomatoes - Raspberry", icon: "seedling", description: "Sweet and tangy tomatoes with raspberry-like notes" },
        { id: 14, name: "Tomatoes - Crinkle", icon: "seedling", description: "Unique wrinkled tomatoes with intense flavor" },
        { id: 15, name: "Courgette White", icon: "carrot", description: "Pale-skinned zucchini with delicate flavor" },
        { id: 16, name: "Courgette Yellow", icon: "carrot", description: "Golden zucchini with slightly sweet taste" },
        { id: 17, name: "Sunflower Heads", icon: "sun", description: "Whole sunflower heads for seeds and decoration" },
        { id: 18, name: "Polish Apples", icon: "apple-alt", description: "Traditional Polish apple varieties" },
        { id: 19, name: "Polish Garlic", icon: "seedling", description: "Aromatic Polish garlic bulbs" },
        { id: 20, name: "Garlic Solo", icon: "seedling", description: "Single-clove garlic variety" },
        { id: 21, name: "Polish Pickling Pack", icon: "box", description: "Assorted vegetables perfect for pickling" },
        { id: 22, name: "Pickled Cabbage 1kg", icon: "jar", description: "Traditional Polish fermented cabbage" },
        { id: 23, name: "Pickled Cabbage 500g", icon: "jar", description: "Smaller portion of fermented cabbage" },
        { id: 24, name: "Gherkins in brine 1kg", icon: "jar", description: "Crisp pickled gherkins in brine solution" },
        { id: 25, name: "Gherkins in brine 500g", icon: "jar", description: "Small jar of pickled gherkins" },
        { id: 26, name: "Raspberry Honey 450g", icon: "jar", description: "Honey infused with natural raspberry flavor" },
        { id: 27, name: "Polish Long Spring Onions", icon: "seedling", description: "Extra-long spring onions for salads and soups" },
        { id: 28, name: "Polish Sour Cherries", icon: "seedling", description: "Tart cherries perfect for baking and preserves" },
        { id: 29, name: "Polish Blueberries", icon: "apple-alt", description: "Wild Polish blueberries packed with flavor" },
        { id: 30, name: "Polish Broad beans (Bob) 500g", icon: "seedling", description: "Traditional broad beans for stews and salads" }
    ];

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            const productList = document.getElementById('productList');
            const reportModal = document.getElementById('reportModal');
            const closeModal = document.getElementById('closeModal');
            const cancelBtn = document.getElementById('cancelBtn');
            const generateReport = document.getElementById('generateReport');
            const sendEmailBtn = document.getElementById('sendEmailBtn');
            const sendAllBtn = document.getElementById('sendAllBtn');
            const reportList = document.getElementById('reportList');
            const emailForm = document.getElementById('emailForm');
            const searchInput = document.getElementById('searchInput');
            const notification = document.getElementById('notification');
            
            // Generate product cards
            function renderProductList(productsArray = products) {
                productList.innerHTML = '';
                productsArray.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'product-card';
                    productCard.innerHTML = `
                        <div class="product-header">
                            <h3 class="product-name">
                                <i class="fas fa-${product.icon} product-icon"></i>
                                ${product.name}
                            </h3>
                            <div class="product-id">ID: ${product.id}</div>
                        </div>
                        <div class="product-info">
                            <p class="product-description">${product.description}</p>
                            <div class="quantity-control">
                                <span class="quantity-label">Amount:</span>
                                <input type="number" min="0" class="quantity-input" id="product-${product.id}" placeholder="Enter amount">
                            </div>
                        </div>
                    `;
                    productList.appendChild(productCard);
                });
            }
            
            renderProductList();
            
            // Search functionality
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                const filteredProducts = products.filter(product => 
                    product.name.toLowerCase().includes(searchTerm) || 
                    product.description.toLowerCase().includes(searchTerm)
                );
                renderProductList(filteredProducts);
            });
            
            // Show report modal
            function showReport() {
                // Clear previous report
                reportList.innerHTML = '';
                
                // Generate report items
                products.forEach(product => {
                    const input = document.getElementById(`product-${product.id}`);
                    let quantity = 'N/A';
                    let quantityClass = '';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            if (value === 0) {
                                quantity = '0';
                                quantityClass = 'quantity-zero';
                            } else {
                                quantity = value === 1 ? '1 box' : `${value} boxes`;
                            }
                        }
                    }
                    
                    const reportItem = document.createElement('li');
                    reportItem.className = 'report-item';
                    reportItem.innerHTML = `
                        <span class="report-product">${product.name}</span>
                        <span class="report-quantity ${quantityClass}">${quantity}</span>
                    `;
                    reportList.appendChild(reportItem);
                });
                
                reportModal.classList.add('show');
            }
            
            generateReport.addEventListener('click', showReport);
            sendAllBtn.addEventListener('click', showReport);
            
            // Close modal
            const closeModalFunc = () => {
                reportModal.classList.remove('show');
            };
            
            closeModal.addEventListener('click', closeModalFunc);
            cancelBtn.addEventListener('click', closeModalFunc);
            
            // Function to get formatted inventory list for email
            function getInventoryList() {
                let inventoryList = "";
                
                products.forEach(product => {
                    const input = document.getElementById(`product-${product.id}`);
                    let quantity = 'N/A';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            quantity = value === 0 ? '0' : (value === 1 ? '1 box' : `${value} boxes`);
                        }
                    }
                    
                    inventoryList += `${product.name}: ${quantity}\n`;
                });
                
                return inventoryList;
            }
            
            // Send email functionality
            sendEmailBtn.addEventListener('click', (e) => {
                e.preventDefault();
                
                if (emailForm.checkValidity()) {
                    const email = document.getElementById('email').value;
                    const subject = document.getElementById('subject').value;
                    const message = document.getElementById('message').value;
                    const inventoryList = getInventoryList();
                    
                    // Prepare email content
                    const emailBody = encodeURIComponent(
                        `${message}\n\n` +
                        "POLISH PRODUCE INVENTORY REPORT:\n" +
                        "===============================\n\n" +
                        inventoryList
                    );
                    
                    // Create mailto link
                    const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${emailBody}`;
                    
                    // Show notification
                    notification.classList.add('show');
                    setTimeout(() => {
                        notification.classList.remove('show');
                    }, 3000);
                    
                    // Open the email client
                    window.location.href = mailtoLink;
                    
                    // Close the modal after a delay to allow the email client to open
                    setTimeout(closeModalFunc, 500);
                } else {
                    alert('Please enter a valid email address');
                }
            });
            
            // Close modal if clicked outside content
            reportModal.addEventListener('click', (e) => {
                if (e.target === reportModal) {
                    closeModalFunc();
                }
            });
        });');
var script = document.createElement('script');
script.textContent = js;
document.body.appendChild(script);