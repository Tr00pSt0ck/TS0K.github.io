// CSS Loader
var css = atob('* {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        :root {
            --primary: #ffd700;
            --primary-light: #fff9c4;
            --primary-dark: #fbc02d;
            --secondary: #fffde7;
            --accent: #ff9800;
            --text: #5d4037;
            --text-light: #8d6e63;
            --danger: #e74c3c;
            --success: #8bc34a;
            --border: #ffe082;
            --shadow: rgba(0, 0, 0, 0.08);
            --card-bg: #fff;
        }
        
        body {
            background: linear-gradient(135deg, #fffde7, #fff9c4);
            min-height: 100vh;
            padding: 20px;
            color: var(--text);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0 20px;
            margin-bottom: 20px;
        }
        
    .top-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        margin-bottom: 10px;
    }
    
    .home-btn {
        background: linear-gradient(135deg, var(--primary), var(--primary-light));
        color: white;
        padding: 10px 20px;
        border-radius: 50px;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    
    .home-btn:hover {
        background: linear-gradient(135deg, var(--primary-dark), var(--primary));
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }

        h1 {
            font-size: 3rem;
            color: var(--text);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }
        
        .logo {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: var(--text);
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 0 10px;
        }
        
        .search-box {
            display: flex;
            align-items: center;
            background: white;
            border-radius: 50px;
            padding: 8px 20px;
            box-shadow: 0 2px 8px var(--shadow);
            width: 300px;
        }
        
        .search-box input {
            border: none;
            padding: 8px 15px;
            font-size: 1rem;
            width: 100%;
            outline: none;
            background: transparent;
        }
        
        .egg-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .egg-card {
            background: var(--card-bg);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 20px var(--shadow);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            border-left: 5px solid var(--accent);
            position: relative;
        }
        
        .egg-card::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #ffd700, #ff9800);
        }
        
        .egg-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .egg-header {
            background: rgba(255, 215, 0, 0.1);
            padding: 15px 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .egg-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .egg-icon {
            color: var(--primary-dark);
            font-size: 1.4rem;
            width: 30px;
            text-align: center;
        }
        
        .egg-id {
            background: var(--primary);
            color: white;
            font-size: 0.9rem;
            padding: 3px 10px;
            border-radius: 20px;
            position: relative; /* Required for absolute positioning */
            min-height: 30px;   /* Ensure parent has height */
            max-height: 30px;
            white-space: nowrap;
        }
        
        .egg-info {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .egg-description {
            color: var(--text-light);
            margin-bottom: 20px;
            line-height: 1.5;
            flex-grow: 1;
            font-size: 0.95rem;
        }
        
        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        .quantity-label {
            font-weight: 600;
            color: var(--text);
            min-width: 70px;
            font-size: 0.9rem;
        }
        
        .quantity-input {
            flex-grow: 1;
            padding: 10px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
            color: var(--text);
            transition: border-color 0.3s;
            width: 100%;
        }
        
        .quantity-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.2);
        }
        
        .actions {
            text-align: center;
            margin: 40px 0;
        }
        
        .btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--text);
            border: none;
            padding: 15px 40px;
            font-size: 1.1rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(255, 215, 0, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
        }
        
        .btn:hover {
            background: linear-gradient(135deg, var(--primary-dark), #e65100);
            transform: translateY(-3px);
            box-shadow: 0 7px 15px rgba(255, 152, 0, 0.4);
            color: white;
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-large {
            padding: 15px 50px;
            font-size: 1.2rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .modal.show {
            display: flex;
            opacity: 1;
        }
        
        .modal-content {
            background: white;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            transform: translateY(20px);
            transition: transform 0.4s ease;
        }
        
        .modal.show .modal-content {
            transform: translateY(0);
        }
        
        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: var(--text);
            padding: 20px;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: var(--text);
            font-size: 1.8rem;
            cursor: pointer;
            transition: transform 0.3s;
        }
        
        .close-btn:hover {
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 25px;
        }
        
        .report-content {
            margin-bottom: 30px;
        }
        
        .report-title {
            text-align: center;
            margin-bottom: 25px;
            color: var(--text);
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .report-list {
            list-style: none;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .report-item {
            display: flex;
            padding: 15px 20px;
            border-bottom: 1px solid #e0e0e0;
            align-items: center;
        }
        
        .report-item:last-child {
            border-bottom: none;
        }
        
        .report-item:nth-child(even) {
            background: #f5f5f5;
        }
        
        .report-egg {
            flex: 1;
            font-weight: 600;
        }
        
        .report-quantity {
            width: 100px;
            text-align: right;
            font-weight: 600;
            color: var(--text);
        }
        
        .quantity-zero {
            color: var(--danger);
            font-weight: bold;
        }
        
        .email-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--text);
            font-size: 0.9rem;
        }
        
        .form-input {
            padding: 12px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .modal-footer {
            padding: 0 25px 25px;
            display: flex;
            gap: 15px;
            justify-content: flex-end;
        }
        
        .btn-secondary {
            background: #f5f5f5;
            color: var(--text);
        }
        
        .btn-secondary:hover {
            background: #e0e0e0;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            color: var(--text);
            font-size: 0.9rem;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: none;
            z-index: 2000;
        }
        
        .notification.show {
            display: block;
            animation: fadeInOut 3s ease;
        }
        
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
        
        @media (max-width: 768px) {
            .egg-list {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .search-box {
                width: 100%;
            }
            
            .btn {
                padding: 12px 30px;
                font-size: 1rem;
            }
        }
        
        @media (max-width: 480px) {
            .egg-list {
                grid-template-columns: 1fr;
            }
            
            .report-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            
            .report-quantity {
                text-align: left;
                width: auto;
            }
            
            .modal-footer {
                flex-direction: column;
            }
        }
        
        .egg-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 20%);
            pointer-events: none;
            z-index: -1;
        }
        
        .egg-size-chart {
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            border: 1px dashed var(--border);
        }
        
        .chart-title {
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--text);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .chart-row {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
        }
        
        .chart-row:last-child {
            border-bottom: none;
        }');
var style = document.createElement('style');
style.textContent = css;
document.head.appendChild(style);