// CSS Loader
var css = atob('* {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        :root {
            --primary: #d4a76a;
            --primary-light: #e6c9a0;
            --primary-dark: #b8864b;
            --secondary: #fff8f0;
            --accent: #8b4513;
            --text: #5c3a21;
            --text-light: #7d5d3f;
            --danger: #e74c3c;
            --success: #27ae60;
            --border: #e0c9a8;
            --shadow: rgba(0, 0, 0, 0.08);
            --card-bg: #fffdf9;
            --category-bg: rgba(212, 167, 106, 0.15);
        }
        
        body {
            background: linear-gradient(135deg, #fff8f0, #fcf4e9);
            min-height: 100vh;
            padding: 20px;
            color: var(--text);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            padding: 30px 0 20px;
            margin-bottom: 20px;
        }
        
        .top-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            margin-bottom: 10px;
        }
        
        .home-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
            padding: 10px 20px;
            border-radius: 50px;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .home-btn:hover {
            background: linear-gradient(135deg, var(--primary-dark), var(--primary));
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }

        h1 {
            font-size: 3rem;
            color: var(--accent);
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }
        
        .logo {
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: var(--accent);
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding: 0 10px;
        }
        
        .search-box {
            display: flex;
            align-items: center;
            background: var(--card-bg);
            border-radius: 50px;
            padding: 8px 20px;
            box-shadow: 0 2px 8px var(--shadow);
            width: 300px;
            border: 1px solid var(--border);
        }
        
        .search-box input {
            border: none;
            padding: 8px 15px;
            font-size: 1rem;
            width: 100%;
            outline: none;
            background: transparent;
            color: var(--text);
        }
        
        .bread-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }
        
        .category-section {
            grid-column: 1 / -1;
            margin-top: 30px;
            margin-bottom: 15px;
            padding: 15px 20px;
            background: var(--category-bg);
            border-radius: 12px;
            display: flex;
            align-items: center;
            border-left: 4px solid var(--primary-dark);
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        
        .category-icon {
            background: var(--primary);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            margin-right: 15px;
        }
        
        .category-title {
            font-size: 1.6rem;
            color: var(--accent);
            font-weight: 600;
        }
        
        .bread-card {
            background: var(--card-bg);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 20px var(--shadow);
            transition: all 0.3s ease;
            display: flex;
            flex-direction: column;
            border-left: 5px solid var(--accent);
            border-top: 1px solid var(--border);
        }
        
        .bread-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }
        
        .bread-header {
            background: rgba(212, 167, 106, 0.1);
            padding: 15px 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .bread-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .bread-icon {
            color: var(--primary-dark);
            font-size: 1.3rem;
            width: 30px;
            text-align: center;
        }
        
        .bread-id {
            background: var(--primary);
            color: white;
            font-size: 0.9rem;
            padding: 3px 10px;
            border-radius: 20px;
            position: relative; /* Required for absolute positioning */
            min-height: 30px;   /* Ensure parent has height */
            max-height: 30px;
            white-space: nowrap;
        }
        
        .bread-info {
            padding: 20px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .bread-description {
            color: var(--text-light);
            margin-bottom: 20px;
            line-height: 1.5;
            flex-grow: 1;
            font-size: 0.9rem;
            min-height: 60px;
        }
        
        .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }
        
        .quantity-label {
            font-weight: 600;
            color: var(--accent);
            min-width: 70px;
            font-size: 0.9rem;
        }
        
        .quantity-input {
            flex-grow: 1;
            padding: 10px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
            color: var(--text);
            transition: border-color 0.3s;
            width: 100%;
            background: white;
        }
        
        .quantity-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(212, 167, 106, 0.2);
        }
        
        .actions {
            text-align: center;
            margin: 40px 0;
        }
        
        .btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.1rem;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(180, 135, 75, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 10px;
            font-weight: 600;
        }
        
        .btn:hover {
            background: linear-gradient(135deg, var(--primary-dark), var(--accent));
            transform: translateY(-3px);
            box-shadow: 0 7px 15px rgba(180, 135, 75, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-large {
            padding: 15px 50px;
            font-size: 1.2rem;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .modal.show {
            display: flex;
            opacity: 1;
        }
        
        .modal-content {
            background: var(--card-bg);
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            transform: translateY(20px);
            transition: transform 0.4s ease;
        }
        
        .modal.show .modal-content {
            transform: translateY(0);
        }
        
        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 20px;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.8rem;
            cursor: pointer;
            transition: transform 0.3s;
        }
        
        .close-btn:hover {
            transform: rotate(90deg);
        }
        
        .modal-body {
            padding: 25px;
        }
        
        .report-content {
            margin-bottom: 30px;
        }
        
        .report-title {
            text-align: center;
            margin-bottom: 25px;
            color: var(--accent);
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 10px;
            background: rgba(212, 167, 106, 0.1);
            border-radius: 10px;
        }
        
        .report-list {
            list-style: none;
            border: 1px solid var(--border);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .report-category {
            background: var(--primary);
            color: white;
            font-weight: bold;
            padding: 12px 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .report-item {
            display: flex;
            padding: 15px 20px;
            border-bottom: 1px solid var(--border);
            align-items: center;
        }
        
        .report-item:last-child {
            border-bottom: none;
        }
        
        .report-item:nth-child(even) {
            background: #f9f5f0;
        }
        
        .report-bread {
            flex: 1;
            font-weight: 600;
            color: var(--text);
        }
        
        .report-quantity {
            width: 100px;
            text-align: right;
            font-weight: 600;
            color: var(--accent);
        }
        
        .quantity-zero {
            color: var(--danger);
            font-weight: bold;
        }
        
        .email-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid var(--border);
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .form-label {
            font-weight: 600;
            color: var(--text);
            font-size: 0.9rem;
        }
        
        .form-input {
            padding: 12px 15px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 1rem;
            background: white;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .modal-footer {
            padding: 0 25px 25px;
            display: flex;
            gap: 15px;
            justify-content: flex-end;
        }
        
        .btn-secondary {
            background: #f5f5f5;
            color: var(--text);
        }
        
        .btn-secondary:hover {
            background: #e0e0e0;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            color: var(--accent);
            font-size: 0.9rem;
            border-top: 1px solid var(--border);
            margin-top: 20px;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: none;
            z-index: 2000;
        }
        
        .notification.show {
            display: block;
            animation: fadeInOut 3s ease;
        }
        
        @keyframes fadeInOut {
            0% { opacity: 0; transform: translateY(-20px); }
            10% { opacity: 1; transform: translateY(0); }
            90% { opacity: 1; transform: translateY(0); }
            100% { opacity: 0; transform: translateY(-20px); }
        }
        
        @media (max-width: 768px) {
            .bread-list {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .search-box {
                width: 100%;
            }
            
            .btn {
                padding: 12px 30px;
                font-size: 1rem;
            }
        }
        
        @media (max-width: 480px) {
            .bread-list {
                grid-template-columns: 1fr;
            }
            
            .report-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 5px;
            }
            
            .report-quantity {
                text-align: left;
                width: auto;
            }
            
            .modal-footer {
                flex-direction: column;
            }
        }');
var style = document.createElement('style');
style.textContent = css;
document.head.appendChild(style);