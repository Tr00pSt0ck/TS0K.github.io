// JS Loader
var js = atob('// Dairy product data with icons
        const dairyProducts = [
            { id: 1, name: "Skimmed Milk 2L", icon: "cow", description: "Low-fat skimmed milk (Red) in 2 liter bottles" },
            { id: 2, name: "Semi Skimmed Milk 2L", icon: "cow", description: "Reduced-fat semi-skimmed milk (Green)  in 2 liter bottles" },
            { id: 3, name: "Whole Milk 2L", icon: "cow", description: "Full-fat whole milk (Blue) in 2 liter bottles " },
            { id: 4, name: "Whipping Cream 2L", icon: "cow", description: "Heavy whipping cream in 2 liter containers" },
            { id: 5, name: "Double Cream 2L", icon: "cow", description: "Rich double cream in 2 liter containers" },
            { id: 6, name: "Soya Milk", icon: "leaf", description: "Plant-based soy milk alternative" },
            { id: 7, name: "Oat Milk", icon: "wheat-awn", description: "Plant-based oat milk alternative" },
            { id: 8, name: "Semi Skimmed Milk 1L", icon: "cow", description: "Reduced-fat semi-skimmed milk (Green) in 1 liter bottles" },
            { id: 9, name: "Pergal Semi Skimmed Milk", icon: "cow", description: "Premium semi-skimmed (Green) milk in Pergal packaging" },
            { id: 10, name: "Halloumi Cheese", icon: "cheese", description: "Grillable Cypriot halloumi cheese" },
            { id: 11, name: "Feta Cheese", icon: "cheese", description: "Traditional Greek feta cheese" },
            { id: 12, name: "Stilton Cheese", icon: "cheese", description: "English blue cheese with distinctive flavor" },
            { id: 13, name: "Brie Cheese", icon: "cheese", description: "Soft French brie cheese" },
            { id: 14, name: "Mild Cheese 2KG", icon: "cheese", description: "Mild cheddar cheese PRE-GRATED in 2kg bags" },
            { id: 15, name: "Mild Cheese 5KG", icon: "cheese", description: "Mild cheddar cheese in 5kg blocks" },
            { id: 16, name: "Mature Cheese 5KG", icon: "cheese", description: "Aged cheddar cheese in 5kg blocks" },
            { id: 17, name: "Gruyere 1.5kg", icon: "cheese", description: "Swiss Gruyere cheese in 1.5kg portions" },
            { id: 18, name: "Mascarpone 2KG", icon: "cheese", description: "Italian mascarpone cream cheese in 2kg tubs" },
            { id: 19, name: "Soft Cheese 2KG", icon: "cheese", description: "Creamy (Full-fat) soft cheese in 2kg tubs" },
            { id: 20, name: "Stilton Cheese 2KG", icon: "cheese", description: "English blue cheese in 2kg blocks" },
            { id: 21, name: "Goats Cheese 1KG", icon: "cheese", description: "Tangy goat cheese in 1kg blocks" },
            { id: 22, name: "Parmesan Segment", icon: "cheese", description: "Authentic Italian Parmigiano-Reggiano segments" },
            { id: 23, name: "Mozzarella Balls 125g", icon: "cheese", description: "Fresh mozzarella balls in 125g packages" }
        ];

        // Initialize the app
        document.addEventListener('DOMContentLoaded', () => {
            const dairyList = document.getElementById('dairyList');
            const reportModal = document.getElementById('reportModal');
            const closeModal = document.getElementById('closeModal');
            const cancelBtn = document.getElementById('cancelBtn');
            const generateReport = document.getElementById('generateReport');
            const sendEmailBtn = document.getElementById('sendEmailBtn');
            const sendAllBtn = document.getElementById('sendAllBtn');
            const reportList = document.getElementById('reportList');
            const emailForm = document.getElementById('emailForm');
            const searchInput = document.getElementById('searchInput');
            const notification = document.getElementById('notification');
            
            // Generate dairy cards
            function renderDairyList(dairyArray = dairyProducts) {
                dairyList.innerHTML = '';
                dairyArray.forEach(dairy => {
                    const dairyCard = document.createElement('div');
                    dairyCard.className = 'dairy-card';
                    
                    // Determine header class based on product name
                    let headerClass = 'dairy-header';
                    if (dairy.description.includes('(Red)')) {
                        headerClass += ' red';
                    } else if (dairy.description.includes('(Blue)')) {
                        headerClass += ' blue';
                    } else if (dairy.description.includes('(Green)')) {
                        headerClass += ' green';
                    }
                    
                    dairyCard.innerHTML = `
                        <div class="${headerClass}">
                            <h3 class="dairy-name">
                                <i class="fas fa-${dairy.icon} dairy-icon"></i>
                                ${dairy.name}
                            </h3>
                            <div class="dairy-id">ID: ${dairy.id}</div>
                        </div>
                        <div class="dairy-info">
                            <p class="dairy-description">${dairy.description}</p>
                            <div class="quantity-control">
                                <span class="quantity-label">Amount:</span>
                                <input type="number" min="0" class="quantity-input" id="dairy-${dairy.id}" placeholder="Enter amount">
                            </div>
                        </div>
                    `;
                    dairyList.appendChild(dairyCard);
                });
            }
            
            renderDairyList();
            
            // Search functionality
            searchInput.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                const filteredDairy = dairyProducts.filter(dairy => 
                    dairy.name.toLowerCase().includes(searchTerm) || 
                    dairy.description.toLowerCase().includes(searchTerm)
                );
                renderDairyList(filteredDairy);
            });
            
            // Show report modal
            function showReport() {
                // Clear previous report
                reportList.innerHTML = '';
                
                // Generate report items
                dairyProducts.forEach(dairy => {
                    const input = document.getElementById(`dairy-${dairy.id}`);
                    let quantity = 'N/A';
                    let quantityClass = '';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            if (value === 0) {
                                quantity = '0';
                                quantityClass = 'quantity-zero';
                            } else {
                                quantity = value === 1 ? '1 unit' : `${value} units`;
                            }
                        }
                    }
                    
                    const reportItem = document.createElement('li');
                    reportItem.className = 'report-item';
                    reportItem.innerHTML = `
                        <span class="report-dairy">${dairy.name}</span>
                        <span class="report-quantity ${quantityClass}">${quantity}</span>
                    `;
                    reportList.appendChild(reportItem);
                });
                
                reportModal.classList.add('show');
            }
            
            generateReport.addEventListener('click', showReport);
            sendAllBtn.addEventListener('click', showReport);
            
            // Close modal
            const closeModalFunc = () => {
                reportModal.classList.remove('show');
            };
            
            closeModal.addEventListener('click', closeModalFunc);
            cancelBtn.addEventListener('click', closeModalFunc);
            
            // Function to get formatted inventory list for email
            function getInventoryList() {
                let inventoryList = "";
                
                dairyProducts.forEach(dairy => {
                    const input = document.getElementById(`dairy-${dairy.id}`);
                    let quantity = 'N/A';
                    
                    if (input.value.trim() !== '') {
                        const value = parseInt(input.value);
                        if (!isNaN(value)) {
                            quantity = value === 0 ? '0' : (value === 1 ? '1 unit' : `${value} units`);
                        }
                    }
                    
                    inventoryList += `${dairy.name}: ${quantity}\n`;
                });
                
                return inventoryList;
            }
            
            // Send email functionality
            sendEmailBtn.addEventListener('click', (e) => {
                e.preventDefault();
                
                if (emailForm.checkValidity()) {
                    const email = document.getElementById('email').value;
                    const subject = document.getElementById('subject').value;
                    const message = document.getElementById('message').value;
                    const inventoryList = getInventoryList();
                    
                    // Prepare email content
                    const emailBody = encodeURIComponent(
                        `${message}\n\n` +
                        "DAIRY INVENTORY REPORT:\n" +
                        "========================\n\n" +
                        inventoryList
                    );
                    
                    // Create mailto link
                    const mailtoLink = `mailto:${email}?subject=${encodeURIComponent(subject)}&body=${emailBody}`;
                    
                    // Show notification
                    notification.classList.add('show');
                    setTimeout(() => {
                        notification.classList.remove('show');
                    }, 3000);
                    
                    // Open the email client
                    window.location.href = mailtoLink;
                    
                    // Close the modal after a delay to allow the email client to open
                    setTimeout(closeModalFunc, 500);
                } else {
                    alert('Please enter a valid email address');
                }
            });
            
            // Close modal if clicked outside content
            reportModal.addEventListener('click', (e) => {
                if (e.target === reportModal) {
                    closeModalFunc();
                }
            });
        });');
var script = document.createElement('script');
script.textContent = js;
document.body.appendChild(script);